import Dict from "Dictionary"
import File from "File"
import { always, either, equals, noop } from "Function"
import IO from "IO"
import List from "List"
import { fromMaybe } from "Maybe"
import String from "String"
import Wish from "Wish"

import PB from "PartyBus"

import Ext from "@/External"
import { compoundAny } from "@/Function"
import { TAGS } from "@/Log"



main = (args) => {
  pipe(
    IO.pTrace("YO"),
    List.nth(1),
    fromMaybe(""),
    File.read,
    // read a file and group blocks
    map(
      pipe(
        String.split("\n\n"),
        map(String.split("\n")),
        map(List.reject(String.isEmpty)),
        List.reject(List.isEmpty),
      ),
    ),
    map(
      pipe(
        // get signatures
        map(
          List.filter(
            either(
              String.contains("type"),
              either(
                equals("}"),
                either(
                  String.contains("alias"),
                  either(String.contains("::"), String.contains("->")),
                ),
              ),
            ),
          ),
        ),
        // clean empty matches
        List.reject(List.isEmpty),
        // remove imports
        List.reject(
          pipe(
            List.first,
            map(String.startsWith("import")),
            fromMaybe(false),
          ),
        ),
        // map names to sigs
        map(
          pipe(
            map(String.trim),
            String.join("\n"),
            String.replace("\n", " "),
            // not everything has a signature
            // String.split(" :: "),


          ),
        ),
        PB.env(TAGS.parse, "raw!"),
        // map(
        //   where {
        //     [name, signature] =>
        //       #[name, signature]
        //
        //     _ =>
        //       #["?", "?"]
        //   },
        // ),
        // Dict.fromList,

      ),
    ),
    // PB.env(TAGS.parse, "raw!"),
    Wish.fulfill(
      pipe(
        IO.pTrace("BAD"),
        noop,
      ),
      pipe(
        show,
        IO.putLine,
        noop,
      ),
    ),
  )(args)
}
