import Dict from "Dictionary"
import IO from "IO"
import List from "List"
import Set from "Set"
import { isEmpty, join } from "String"
import Tuple from "Tuple"

import {
  External,
  Local,
  Prelude,
  allDeps,
  isExternal,
  isLocal,
  isPrelude,
  name,
  slug,
} from "@/Dependencies"
import { indent, quote, sandwich, unlines } from "@/String"



NODE = {
  box: sandwich("[", "]"),
  rounded: sandwich("(", ")"),
  stadium: sandwich("[(", ")]"),
  subroutine: sandwich("[[", "]]"),
  database: sandwich("[(", ")]"),
  circle: sandwich("((", "))"),
  diamond: sandwich("{", "}"),
  hex: sandwich("{{", "}}"),
}

LINK = {
  arrow: sandwich($, $, " --> "),
  thick: sandwich($, $, " ==> "),
  longArrow: sandwich($, $, " ---> "),
  thickLongArrow: sandwich($, $, " ===> "),
  longerArrow: sandwich($, $, " ----> "),
  thickLongerArrow: sandwich($, $, " ====> "),
  open: sandwich($, $, " --- "),
  dotted: sandwich($, $, "-.->"),
  invisible: sandwich($, $, " ~~~ "),
  circle: sandwich($, $, " --o "),
  cross: sandwich($, $, " --x "),
  arrowWithLabel: (lb, a, z) => pipe(
    sandwich("-->|", "|"),
    sandwich(a, z),
  )(lb),
  dottedWithLabel: (lb, a, z) => pipe(
    sandwich("-. ", ".->"),
    sandwich(a, z),
  )(lb),
  thickWithLabel: (lb, a, z) => pipe(
    sandwich(" == ", " ==> "),
    sandwich(a, z),
  )(lb),
}

export declareNode = (styler, i, x) => `${i}${styler(quote(x))}`

export declareSpecificNodeWithStyle = (select, styler, xs) => pipe(
  List.filter(select),
  map(
    pipe(
      (x) => declareNode(styler, slug(x), name(x)),
      indent(1),
    ),
  ),
  unlines,
)(xs)

export declareNodes = pipe(
  Set.toList,
  (raw) => {
    paint = declareSpecificNodeWithStyle($, $, raw)
    extNodes = paint(isExternal, NODE.box)
    localNodes = paint(isLocal, NODE.rounded)
    preludeNodes = paint(isPrelude, NODE.hex)
    return [extNodes, preludeNodes, localNodes]
  },
  unlines,
)

export type Direction = LeftRight | TopBottom | RightLeft | BottomTop

renderDir = where {
  LeftRight =>
    "LR"

  TopBottom =>
    "TB"

  RightLeft =>
    "RL"

  BottomTop =>
    "BT"
}

relate = (a, z) => where(#[z, a]) {
  #[Prelude(_), Local(_)] =>
    LINK.dotted(slug(z), slug(a))

  #[External(_), Local(_)] =>
    LINK.longerArrow(slug(z), slug(a))

  #[Local(_), Local(_)] =>
    LINK.thick(slug(z), slug(a))

  _ =>
    ""
}


export mermaidFlow = (prefix, dir, raw) => {
  nodes = pipe(
    allDeps,
    declareNodes,
  )(raw)
  relations = pipe(
    Dict.toList,
    map(
      where {
        #[f, xs] =>
          pipe(
            map(
              pipe(
                relate(f),
                indent(1),
              ),
            ),
            unlines,
          )(xs)
      },
    ),
    join("\n\n"),
  )(raw)
  return `${isEmpty(prefix) ? prefix : prefix ++ "\n"}graph ${renderDir(dir)}
\n  %% declarations\n\n${nodes}

\n  %% relationships\n\n${relations}
\n`
}
