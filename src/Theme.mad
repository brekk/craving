import type { Maybe } from "Maybe"

import Dict from "Dictionary"
import List from "List"
import { Just, Nothing, fromMaybe } from "Maybe"
import { isEmpty, join } from "String"

import { quote } from "@/String"



export alias DictString = Dictionary String String

export alias DepRecord = { external :: DictString, local :: DictString, prelude :: DictString }
export alias DepString = { external :: String, local :: String, prelude :: String }

export alias ThemeStructure = {
  bg :: String,
  external :: String,
  fg :: String,
  local :: String,
  prelude :: String,
}
export alias GivenFonts = {
  all :: String,
  external :: Maybe String,
  local :: Maybe String,
  prelude :: Maybe String,
}
export alias Fonts = { all :: String, external :: String, local :: String, prelude :: String }
export alias Template = ThemeStructure -> Fonts -> String
export alias TemplateRecord = ThemeStructure -> Fonts -> DepRecord

// ThemeStructure, Fonts, All, Nodes, Edges
export type Theme = Theme(ThemeStructure, GivenFonts, Template, TemplateRecord, TemplateRecord)

export alias AppliedTheme = {
  all :: String,
  edges :: { external :: String, local :: String, prelude :: String },
  nodes :: { external :: String, local :: String, prelude :: String },
}

reifyStyle :: DictString -> String
reifyStyle = pipe(
  Dict.toList,
  List.reject(where { #[_, v] => isEmpty(v) }),
  map(where { #[k, v] => k ++ "=" ++ quote(v) }),
  join(", "),
)

reifyDepRecord :: DepRecord -> DepString
reifyDepRecord = (d) => (
  { external: reifyStyle(d.external), local: reifyStyle(d.local), prelude: reifyStyle(d.prelude) }
)

applyTheme :: Theme -> AppliedTheme
export applyTheme = where {
  Theme(structure, _fonts, makeAll, makeNodes, makeEdges) =>
    do {
      guarantee = fromMaybe(_fonts.all)
      p = guarantee(_fonts.prelude)
      e = guarantee(_fonts.external)
      l = guarantee(_fonts.local)
      fonts = { all: _fonts.all, prelude: p, external: e, local: l }
      return (
        {
          all: makeAll(structure, fonts),
          nodes: pipe(
            makeNodes(structure),
            reifyDepRecord,
          )(fonts),
          edges: pipe(
            makeEdges(structure),
            reifyDepRecord,
          )(fonts),
        }
      )
    }
}

getPalette :: Theme -> ThemeStructure
export getPalette = where {
  Theme(p, _, _, _, _) =>
    p
}
