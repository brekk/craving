import type { Either } from "Either"
import type { Maybe } from "Maybe"

import type { MadJson } from "@/MadlibJson"

import Dict from "Dictionary"
import { fromRight } from "Either"
import { always, ifElse } from "Function"
import IO from "IO"
import { append, concat, first, includes, last, range, reduce, reject, zip } from "List"
import { fromMaybe } from "Maybe"
import Set from "Set"
import { replace, slice, split, startsWith, toLower } from "String"



unquote = slice(1, -1)

getUniqueDependencies :: Set String -> Set String
export getUniqueDependencies = pipe(
  Set.filter(startsWith("import")),
  map(
    pipe(
      split(" "),
      last,
      fromMaybe(""),
      unquote,
    ),
  ),
  Set.toList,
  Set.fromList,
)

export getDepNames = pipe(
  .dependencies,
  map(map(.description)),
  fromMaybe([]),
)

export type MadDependency = Local(String) | Prelude(String) | External(String)

derive Comparable MadDependency

name :: MadDependency -> String
export name = where {
  Local(x) =>
    x

  Prelude(x) =>
    x

  External(x) =>
    x
}

export isPrelude = where {
  Prelude(_) =>
    true

  _ =>
    false
}
export isLocal = where {
  Local(_) =>
    true

  _ =>
    false
}
export isExternal = where {
  External(_) =>
    true

  _ =>
    false
}

export alias DepMap = Dictionary MadDependency (List MadDependency)

export PRELUDE_COLORS = {{
  // fundamentals
  "Compare": "#767676",
  "Tuple": "#ABABAB",
  // primitives
  "String": "#4B0082",
  "Char": "#2B0062",
  // numeric primitives
  "Math": "#2B4593",
  "Number": "#003262",
  "Short": "#0072AF",
  "Integer": "#0000FF",
  "Byte": "#120BA7",
  "ByteArray": "#123BA7",
  "Float": "#16166B",
  // collections
  "Alternative": "#DFFF00",
  "List": "#FFD700",
  "Array": "#FCF75E",
  "Set": "#EEDC82",
  // structures
  "Dictionary": "#EF9B0F",
  // monadic fundamentals
  "Monad": "#AD7F32",
  "MonadRec": "#694200",
  "Applicative": "#600020",
  "Bifunctor": "#3D0C02",
  "Functor": "#3D2B1F",
  // monadic structures 
  "Maybe": "#DE3163",
  "Either": "#E44D2E",
  "Wish": "#ED2939",
  // date
  "Date": "#CCCCFF",
  // function
  "Function": "#9906DE",
  "Control": "#AA06EF",
  // web
  "Url": "#32174D",
  "Network": "#42274D",
  "Http": "#32276D",
  // file
  "Directory": "#536878",
  "File": "#708090",
  "FilePath": "#4D5D53",
  // parsing
  "Parse": "#D0417E",
  "Json/Parse": "#9F4576",
  "Json/Print": "#AF4596",
  "Json/Value": "#CF45B6",
  // ffi
  "Process": "#03C03C",
  "Thread": "#177245",
  "Crypto": "#00693E",
  // random
  "Random": "#FF1245",
  "Random/LCG": "#FF127B",
  // print
  "Scan": "#3AA8C1",
  "Show": "#20B2AA",
  "PrettyPrint": "#00A693",
  "Terminal": "#21BCBC",
  "IO": "#40E0D0",
  // stream
  "Stream": "#8C92AC",
  "Stream/File": "#8C728C",
  "Stream/Process": "#7C627C",
  // reflection
  "Test": "#32ff12",
}}

preludeColor :: String -> Maybe String
export preludeColor = Dict.get($, PRELUDE_COLORS)

export dependencyColor = pipe(
  name,
  preludeColor,
  fromMaybe(""),
)

export PRELUDE = Dict.keys(PRELUDE_COLORS)

categorizeMadDeps :: List String -> String -> MadDependency
categorizeMadDeps = (madDeps, raw) => ifElse(
  includes($, PRELUDE),
  Prelude,
  pipe(
    split("/"),
    first,
    fromMaybe("???"),
    (normalized) => includes(normalized, madDeps)
      ? External(raw)
      : includes(normalized, PRELUDE) ? Prelude(raw) : Local(raw),
  ),
)(raw)

normalizeImportAliases :: Either String MadJson -> String -> MadDependency
normalizeImportAliases = (madlibJson, filePath) => pipe(
  map(.importAliases),
  map(
    pipe(
      map(
        pipe(
          .path,
          (raw) => replace(`./${raw}`, "@", filePath),
        ),
      ),
      fromMaybe(filePath),
      replace(".mad", ""),
    ),
  ),
  fromRight(filePath),
  Local,
)(madlibJson)

// madlibJson is Right Record
// dependencies is Dictionary String (Set String)
categorize :: List String -> Either String MadJson -> Dictionary String (Set String) -> DepMap
export categorize = (exclude, madlibJson, dependencies) => pipe(
  map(getDepNames),
  fromRight([]),
  (madDeps) => map(
    pipe(
      Set.toList,
      map(categorizeMadDeps(madDeps)),
      // reject(isPrelude),



    ),
    dependencies,
  ),
  Dict.toList,
  reject(where { #[k, v] => includes(k, exclude) }),
  map(where { #[k, v] => #[normalizeImportAliases(madlibJson, k), v] }),
  Dict.fromList,
)(madlibJson)

allDeps :: DepMap -> Set MadDependency
export allDeps = pipe(
  Dict.toList,
  reduce((s, x) => where(x) { #[k, ds] => concat(s, append(k, ds)) }, []),
  Set.fromList,
)

export slug = pipe(
  name,
  replace("@", "_"),
  replace("[\/.]", ""),
  replace("\.mad$", ""),
  toLower,
)
