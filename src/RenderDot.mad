import type { DepMap, MadDependency } from "@/Dependencies"
import type { AppliedTheme, Theme } from "@/Theme"

import Dict from "Dictionary"
import List from "List"
import Set from "Set"
import { join } from "String"

import {
  External,
  Local,
  Prelude,
  allDeps,
  isExternal,
  isLocal,
  isPrelude,
  name,
} from "@/Dependencies"
import { comment, indent, mod, quote, sandwich, unlines } from "@/String"
import { applyTheme } from "@/Theme"



printNode :: MadDependency -> String
printNode = pipe(
  name,
  quote,
  mappend($, ";"),
)

printNodesWithStyle :: Integer -> String -> List MadDependency -> String
printNodesWithStyle = (i, pre, xs) => pipe(
  map(
    pipe(
      printNode,
      indent(i),
    ),
  ),
  unlines,
  mod(mappend(indent(i, pre ++ ";\n"))),
)(xs)

export alias Attribute = #[String, String]

renderAttribute :: Attribute -> String
renderAttribute = where {
  #[k, v] =>
    `${k}=${v};`
}

renderAttributes :: Integer -> List Attribute -> String
renderAttributes = (i, attrs) => pipe(
  map(
    pipe(
      renderAttribute,
      indent(i),
    ),
  ),
  unlines,
)(attrs)

cluster :: List Attribute -> String -> String -> String
export cluster = (attrs, n, body) => `subgraph "${n}" {
  label="${n}";
  cluster=true;
  ${renderAttributes(2, attrs)}
  ${body}
}`

nodeStyle = mappend("node ")

printStyledNodesDeclarationBlock :: Integer
  -> String
  -> (MadDependency -> Boolean)
  -> String
  -> List MadDependency
  -> String
printStyledNodesDeclarationBlock = (i, title, select, pre, xs) => {
  style = pipe(
    sandwich("[", "]"),
    nodeStyle,
  )(pre)
  com = pipe(
    comment,
    indent(i),
  )(`style for ${title} nodes`)
  return pipe(
    List.filter(select),
    printNodesWithStyle(i, style),
    mappend(com ++ "\n"),
  )(xs)
}

renderNodes :: AppliedTheme -> Integer -> List MadDependency -> String
renderNodes = (theme, i, x) => pipe(
  (raw) => {
    com = pipe(
      comment,
      indent(i),
    )

    all = pipe(
      nodeStyle,
      mappend($, ";"),
      indent(i),
    )(theme.all)

    print = printStyledNodesDeclarationBlock(i)
    return [
      com("style for all nodes"),
      all,
      print("external", isExternal, theme.nodes.external, raw),
      print("local", isLocal, theme.nodes.local, raw),
      print("prelude", isPrelude, theme.nodes.prelude, raw),
    ]
  },
  unlines,
)(x)

declareNodes :: AppliedTheme -> Set MadDependency -> String
export declareNodes = (theme, deps) => pipe(
  Set.toList,
  renderNodes(theme, 1),
)(deps)

// TEEN GIRL SQUAD
arrowd :: String -> MadDependency -> MadDependency -> String
arrowd = (style, a, z) => pipe(
  sandwich(quote(name(a)), quote(name(z))),
  mappend($, mod(sandwich(" [", "]"), style) ++ ";"),
)(" -> ")


relationshipRules :: AppliedTheme -> MadDependency -> MadDependency -> String
relationshipRules = (theme, _a, _z) => {
  draw = arrowd($, _z, _a)
  return where(#[_z, _a]) {
    #[Prelude(_), Local(_)] =>
      draw(theme.edges.prelude)

    #[External(_), Local(_)] =>
      draw(theme.edges.external)

    #[Local(_), Local(_)] =>
      draw(theme.edges.local)

    _ =>
      draw("")
  }
}

relate :: AppliedTheme -> MadDependency -> List MadDependency -> String
export relate = (theme, a, zs) => pipe(
  map(
    pipe(
      relationshipRules(theme, a),
      indent(1),
    ),
  ),
  unlines,
)(zs)

render :: Theme -> List Attribute -> DepMap -> String
export render = (_theme, attrs, depMap) => {
  theme = applyTheme(_theme)
  nodes = pipe(
    allDeps,
    declareNodes(theme),
  )(depMap)
  relations = pipe(
    Dict.toList,
    map(where { #[k, v] => relate(theme, k, v) }),
    unlines,
  )(depMap)
  spacedComment = pipe(
    comment,
    mappend("\n\n  "),
  )
  return join(
    "\n\n",
    [
      `digraph MadDeps {`,
      spacedComment("attributes"),
      renderAttributes(1, attrs),
      spacedComment("nodes"),
      nodes,
      spacedComment("relationships"),
      relations,
      `}`,
    ],
  )
}
